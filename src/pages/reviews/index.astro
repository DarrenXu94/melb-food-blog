---
import Layout from "../../layouts/Layout.astro";
import ReviewCard from "../../components/ReviewCard.astro";
import FilterSection from "../../components/FilterSection.astro";
import type { Review } from "../../types/blog";
import { getAllReviews } from "../../utils/api";
import { reviewDbRowToObject } from "../../utils/mappers";
import { toCamelCaseAndRemoveSpecialChars } from "../../utils/string";

// Get query parameters
const url = new URL(Astro.request.url);
const cuisine = url.searchParams.get("cuisine") || "";
const location = url.searchParams.get("location") || "";
const price = url.searchParams.get("price") || "";

const res = await getAllReviews();
const allReviews = res.reviews.map(reviewDbRowToObject);

// Filter reviews based on query parameters
let filteredReviews = allReviews.map((review) => ({
  ...review,
  href: `/reviews/${toCamelCaseAndRemoveSpecialChars(review.properties.name)}`,
}));

if (cuisine) {
  filteredReviews = filteredReviews.filter((review) =>
    review.properties.cuisineType.some((c) =>
      c.toLowerCase().includes(cuisine.toLowerCase())
    )
  );
}

if (location) {
  filteredReviews = filteredReviews.filter((review) =>
    review.properties.suburb.toLowerCase().includes(location.toLowerCase())
  );
}

if (price) {
  filteredReviews = filteredReviews.filter(
    (review) => review.properties.priceRange === price
  );
}

// Sort by rating (highest first)
filteredReviews.sort(
  (a, b) => parseFloat(b.properties.rating) - parseFloat(a.properties.rating)
);
---

<Layout title="Restaurant Reviews - Melbourne Food Blog">
  <div class="page-header">
    <div class="container">
      <h1 class="page-title">Restaurant Reviews</h1>
      <p class="page-subtitle">
        Discover Melbourne's finest dining experiences
      </p>
    </div>
  </div>

  <div class="page-content">
    <div class="container">
      <div class="grid grid--sidebar">
        <!-- Filters Sidebar -->
        <aside class="filters-sidebar">
          <FilterSection cuisine={cuisine} location={location} price={price} />
        </aside>

        <!-- Reviews Grid -->
        <main class="reviews-main">
          <div class="reviews-header">
            <h2 class="reviews-title">
              {filteredReviews.length}
              {filteredReviews.length === 1 ? "Review" : "Reviews"} Found
            </h2>
            {
              filteredReviews.length === 0 && (
                <p class="no-results">
                  No reviews match your current filters. Try adjusting your
                  search criteria.
                </p>
              )
            }
          </div>

          <div class="grid grid--3-cols">
            {
              filteredReviews.map((review) => (
                <ReviewCard {...review} size="medium" />
              ))
            }
          </div>
        </main>
      </div>
    </div>
  </div>
</Layout>

<style>
  .page-header {
    background-color: var(--color-gray-50);
    padding: var(--spacing-12) 0;
    border-bottom: 1px solid var(--color-gray-200);
  }

  .page-title {
    font-size: var(--font-size-4xl);
    font-weight: var(--font-weight-bold);
    margin-bottom: var(--spacing-4);
    text-align: center;
  }

  .page-subtitle {
    font-size: var(--font-size-lg);
    color: var(--color-gray-600);
    text-align: center;
    margin: 0;
  }

  .page-content {
    padding: var(--spacing-8) 0;
  }

  .filters-sidebar {
    @media (max-width: 1023px) {
      order: 2;
    }
  }

  .reviews-main {
    @media (max-width: 1023px) {
      order: 1;
    }
  }

  .reviews-header {
    margin-bottom: var(--spacing-8);
  }

  .reviews-title {
    font-size: var(--font-size-2xl);
    font-weight: var(--font-weight-semibold);
    margin-bottom: var(--spacing-4);
  }

  .no-results {
    color: var(--color-gray-600);
    font-style: italic;
    margin: 0;
  }
</style>
