---
import Layout from '../../../layouts/Layout.astro';
import ReviewCard from '../../../components/ReviewCard.astro';
import { getAllReviews } from '../../../utils/api';
import { allReviewsMappedToLocationAndCuisine, reviewDbRowToObject } from '../../../utils/mappers';
import type { Review } from '../../../types/blog';
import { capitalize, toCamelCaseAndRemoveSpecialChars } from '../../../utils/string';

// Define static paths for the dynamic route
export async function getStaticPaths() {
  const res = await getAllReviews();

const reduceToCuisineAndLocation = res.reviews.reduce((acc, review) => {
	const mappedReview = reviewDbRowToObject(review);
	const cuisineTypes = mappedReview.properties.cuisineType || [];
	const suburb = mappedReview.properties.suburb || 'Unknown';

	cuisineTypes.forEach(cuisine => acc.cuisines.add(cuisine));
	acc.locations.add(suburb);

	return acc;
}, {cuisines: new Set<string>(), locations: new Set<string>()} );

	const paths = [
		// Cuisine categories
		...Array.from(reduceToCuisineAndLocation.cuisines).map(cuisine => ({
			params: { type: 'cuisine', id: cuisine.toLowerCase() }
		})),
		// Location categories
		...Array.from(reduceToCuisineAndLocation.locations).map(location => ({
			params: { type: 'location', id: location.toLowerCase() }
		}))
	]
  
  return paths;
}

// Get the category type and ID from the URL
const { type, id } = Astro.params;

const res = await getAllReviews();

const reduceToCuisineAndLocation = allReviewsMappedToLocationAndCuisine(res)

const cuisineData = Object.keys(reduceToCuisineAndLocation.cuisines).map(cuisine => ({
	name: cuisine,
	description: `Explore the best ${cuisine} restaurants in Melbourne.`,
	reviews: reduceToCuisineAndLocation.cuisines[cuisine]
}));

const locationData = Object.keys(reduceToCuisineAndLocation.locations).map(location => ({
	name: location,
	description: `Discover top-rated restaurants in ${location}, Melbourne.`,
	reviews: reduceToCuisineAndLocation.locations[location]
}));



// Get the appropriate data based on type and id
let categoryData: any = null;
let categoryName = "";
let categoryDescription = "";
let categoryReviews: Review[] = [];
let categoryColor = "";

if (type === 'cuisine' && id ) {

	const findCuisine = cuisineData.find(cuisine => cuisine.name.toLowerCase() === id.toLowerCase());
	if (!findCuisine) {
		categoryData = null;
	} else {
		categoryData = findCuisine;
		categoryName = capitalize(categoryData.name);
		categoryDescription = categoryData.description;
		categoryReviews = categoryData.reviews;
		console.log(categoryReviews)
		categoryColor = "#e74c3c"; // Default color for cuisines
	}

	
} else if (type === 'location' && id) {

	const findLocation = locationData.find(location => location.name.toLowerCase() === id.toLowerCase());
	if (!findLocation) {
		categoryData = null;
	} else {
		categoryData = findLocation;
		categoryName = categoryData.name;
		categoryDescription = categoryData.description;
		categoryReviews = categoryData.reviews;
		categoryColor = "#3498db"; // Default color for locations

	}

}

const hasCategory = categoryData !== null;
---

<Layout title={`${hasCategory ? categoryName : 'Category'} - Melbourne Food Blog`}>
	{hasCategory ? (
		<div class="category-page">
			<!-- Category Header -->
			<section class="category-header">
				<div class="container">
					<div class="category-hero">
						<div class="category-info">
							<h1 class="category-title">{categoryName}</h1>
							<p class="category-description">{categoryDescription}</p>
							<div class="category-stats">
								<div class="stat">
									<span class="stat-number">{categoryReviews.length}</span>
									<span class="stat-label">{categoryReviews.length === 1 ? 'Restaurant' : 'Restaurants'}</span>
								</div>
								<div class="stat">
									<span class="stat-number">
										{(categoryReviews.reduce((sum, review) => sum + parseFloat(review.properties.rating), 0) / categoryReviews.length).toFixed(1)}
									</span>
									<span class="stat-label">Average Rating</span>
								</div>
							</div>
						</div>
						<div class="category-visual" style="background-color: {categoryColor}20;">
							<div class="category-icon" style="background-color: {categoryColor};">
								{type === 'cuisine' ? 'üçΩÔ∏è' : 'üìç'}
							</div>
						</div>
					</div>
				</div>
			</section>

			<!-- Category Reviews -->
			<section class="category-reviews">
				<div class="container">
					<div class="reviews-header">
						<h2 class="reviews-title">
							{categoryReviews.length} {categoryReviews.length === 1 ? 'Restaurant' : 'Restaurants'} in {categoryName}
						</h2>
						<div class="reviews-actions">
							<a href="/category" class="btn btn--primary">Browse Categories</a>
						</div>
					</div>

					<div class="grid grid--3-cols">
						{categoryReviews.map((review) => (
							<ReviewCard {...review} href={`/reviews/${toCamelCaseAndRemoveSpecialChars(review.properties.name)}`} size="medium" />
						))}
					</div>
				</div>
			</section>

			<!-- Related Categories -->
			<section class="related-categories">
				<div class="container">
					<h2 class="related-title">Explore More</h2>
					<div class="related-links">
						<a href="/category" class="btn btn--outline">All Categories</a>
						<a href="/reviews" class="btn btn--primary">All Reviews</a>
						<a href="/search" class="btn btn--secondary">Search Restaurants</a>
					</div>
				</div>
			</section>
		</div>
	) : (
		<div class="error-page">
			<div class="container">
				<div class="error-content">
					<h1 class="error-title">Category Not Found</h1>
					<p class="error-message">The category you're looking for could not be found.</p>
					<a href="/category" class="btn btn--primary">Browse All Categories</a>
				</div>
			</div>
		</div>
	)}
</Layout>

<style>
	.category-page {
		padding: 0;
	}
	
	.category-header {
		background-color: var(--color-gray-50);
		padding: var(--spacing-12) 0;
		border-bottom: 1px solid var(--color-gray-200);
	}
	
	.category-hero {
		display: grid;
		gap: var(--spacing-8);
		grid-template-columns: 1fr;
		align-items: center;
		
		@media (min-width: 768px) {
			grid-template-columns: 2fr 1fr;
		}
	}
	
	.category-title {
		font-size: var(--font-size-4xl);
		font-weight: var(--font-weight-bold);
		margin-bottom: var(--spacing-4);
		color: var(--color-gray-900);
	}
	
	.category-description {
		font-size: var(--font-size-lg);
		color: var(--color-gray-600);
		margin-bottom: var(--spacing-6);
		line-height: var(--line-height-relaxed);
	}
	
	.category-stats {
		display: flex;
		gap: var(--spacing-8);
		flex-wrap: wrap;
	}
	
	.stat {
		display: flex;
		flex-direction: column;
		align-items: center;
		text-align: center;
	}
	
	.stat-number {
		font-size: var(--font-size-3xl);
		font-weight: var(--font-weight-bold);
		color: var(--color-primary);
		margin-bottom: var(--spacing-1);
	}
	
	.stat-label {
		font-size: var(--font-size-sm);
		color: var(--color-gray-600);
		font-weight: var(--font-weight-medium);
		text-transform: uppercase;
		letter-spacing: 0.05em;
	}
	
	.category-visual {
		display: flex;
		align-items: center;
		justify-content: center;
		padding: var(--spacing-8);
		border-radius: var(--radius-lg);
		min-height: 200px;
	}
	
	.category-icon {
		width: 120px;
		height: 120px;
		border-radius: 50%;
		display: flex;
		align-items: center;
		justify-content: center;
		font-size: 3rem;
		color: var(--color-white);
		box-shadow: var(--shadow-lg);
	}
	
	.category-reviews {
		padding: var(--spacing-12) 0;
	}
	
	.reviews-header {
		display: flex;
		justify-content: space-between;
		align-items: center;
		margin-bottom: var(--spacing-8);
		flex-wrap: wrap;
		gap: var(--spacing-4);
	}
	
	.reviews-title {
		font-size: var(--font-size-2xl);
		font-weight: var(--font-weight-semibold);
		margin: 0;
	}
	
	.reviews-actions {
		display: flex;
		gap: var(--spacing-4);
		flex-wrap: wrap;
	}
	
	
	.related-categories {
		background-color: var(--color-gray-50);
		padding: var(--spacing-12) 0;
		border-top: 1px solid var(--color-gray-200);
	}
	
	.related-title {
		text-align: center;
		margin-bottom: var(--spacing-8);
		font-size: var(--font-size-2xl);
	}
	
	.related-links {
		display: flex;
		justify-content: center;
		gap: var(--spacing-4);
		flex-wrap: wrap;
	}
	
	.error-page {
		padding: var(--spacing-16) 0;
		text-align: center;
	}
	
	.error-content {
		max-width: 500px;
		margin: 0 auto;
	}
	
	.error-title {
		font-size: var(--font-size-4xl);
		margin-bottom: var(--spacing-6);
		color: var(--color-gray-900);
	}
	
	.error-message {
		font-size: var(--font-size-lg);
		color: var(--color-gray-600);
		margin-bottom: var(--spacing-8);
	}
	
	@media (max-width: 640px) {
		.reviews-header {
			flex-direction: column;
			align-items: stretch;
		}
		
		.reviews-title {
			text-align: center;
		}
		
		.reviews-actions {
			justify-content: center;
		}
	}
</style>
