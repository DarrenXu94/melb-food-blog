---
import { getAllReviews } from "../utils/api";
import { reviewDbRowToObject } from "../utils/mappers";

const res = await getAllReviews();
const mappedReviews = res.reviews.map(reviewDbRowToObject);
---

<section class="search-section">
  <form method="GET" class="search-form" id="searchForm">
    <div class="search-form__main">
      <div class="search-input-group">
        <input
          id="searchInput"
          type="search"
          name="q"
          placeholder="Search by restaurant name, cuisine, or location..."
          class="form-input search-input"
          aria-label="Search restaurants"
        />
        <button type="submit" class="btn btn--primary search-btn">Search</button
        >
      </div>
    </div>
  </form>
</section>

<span id="data-reviews" data-reviews={JSON.stringify(mappedReviews)}></span>

<script>
  import type { Review } from "../types/blog";
  import { toCamelCaseAndRemoveSpecialChars } from "../utils/string";
  // Check if the current URL has any query params
  const url = new URL(window.location.href);
  const params = new URLSearchParams(url.search);
  const query = params.get("q");

  const id = document.getElementById("data-reviews");
  if (!id) {
    console.error("Data element not found");
  }

  const reviews = JSON.parse(
    id ? (id.getAttribute("data-reviews") as string) : ""
  ) as Review[];

  console.log("Current search query:", query);

  const performSearch = (term: string) => {
    const filteredReviews = reviews.filter((review) => {
      return (
        review.properties.name.toLowerCase().includes(term) ||
        review.properties.cuisineType.some((cuisine) =>
          cuisine.toLowerCase().includes(term)
        ) ||
        review.properties.suburb.toLowerCase().includes(term)
      );
    });
    const resultsGrid = document.getElementById(
      "resultsGrid"
    ) as HTMLDivElement;
    resultsGrid.innerHTML = ""; // Clear previous results
    filteredReviews.forEach((review) => {
      const reviewCard = document.createElement("div");
      reviewCard.className = "review-card";
      reviewCard.innerHTML = `
        <h3>${review.properties.name}</h3>
        <p>Cuisine: ${review.properties.cuisineType.join(", ")}</p>
        <p>Location: ${review.properties.suburb}</p>
        <p>Rating: ${review.properties.rating}/10</p>
        <a href="/reviews/${toCamelCaseAndRemoveSpecialChars(review.properties.name)}" class="btn btn--outline">View Review</a>
      `;
      resultsGrid.appendChild(reviewCard);
    });

    if (filteredReviews.length === 0) {
      resultsGrid.innerHTML =
        "<p class='search-no-results'>No results found.</p>";
    }
  };

  if (query) {
    const searchInput = document.getElementById(
      "searchInput"
    ) as HTMLInputElement;
    searchInput.value = query;
    // Wait for the DOM to be fully loaded before performing the search
    window.requestAnimationFrame(() => {
      performSearch(query.toLowerCase());
    });
  }

  const searchForm = document.getElementById("searchForm") as HTMLFormElement;
  searchForm.addEventListener("submit", (event) => {
    event.preventDefault();

    console.log(event);

    const url = new URL(window.location.href);
    const params = new URLSearchParams(url.search);
    params.set("q", input.value);
    window.history.replaceState({}, "", `${url.pathname}?${params}`);

    performSearch(input.value.toLowerCase());
  });

  const input = document.getElementById("searchInput") as HTMLInputElement;
  input.addEventListener("input", (event) => {
    if (!(event.target instanceof HTMLInputElement)) return;
    const query = event.target.value.toLowerCase();
    console.log("Search query:", query);
  });
</script>

<style>
  .search-form__main {
    margin-bottom: var(--spacing-6);
  }

  .search-input-group {
    display: flex;
    gap: var(--spacing-4);
    max-width: 600px;
    margin: 0 auto;
  }

  .search-input {
    flex: 1;
    font-size: var(--font-size-lg);
    padding: var(--spacing-4) var(--spacing-6);
  }
</style>

<style is:global>
  .search-no-results {
    grid-column: span 3;
  }
</style>
